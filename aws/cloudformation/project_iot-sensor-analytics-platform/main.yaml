AWSTemplateFormatVersion: '2010-09-09'
Description: 'Smart Manufacturing IoT Analytics Platform - Production-ready IoT platform for manufacturing facilities'

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Network Configuration"
        Parameters:
          - VpcCidr
          - PublicSubnet1Cidr
          - PublicSubnet2Cidr
          - PrivateSubnet1Cidr
          - PrivateSubnet2Cidr
      - Label:
          default: "Application Configuration"
        Parameters:
          - Environment
          - ProjectName
          - InstanceType
          - KeyPairName

Parameters:
  Environment:
    Type: String
    Default: production
    AllowedValues: [development, staging, production]
    Description: Environment name
  
  ProjectName:
    Type: String
    Default: smart-manufacturing-iot-analytics-platform
    Description: Project name for resource naming
  
  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
    Description: CIDR block for VPC
  
  PublicSubnet1Cidr:
    Type: String
    Default: 10.0.1.0/24
    Description: CIDR block for public subnet 1
  
  PublicSubnet2Cidr:
    Type: String
    Default: 10.0.2.0/24
    Description: CIDR block for public subnet 2
  
  PrivateSubnet1Cidr:
    Type: String
    Default: 10.0.3.0/24
    Description: CIDR block for private subnet 1
  
  PrivateSubnet2Cidr:
    Type: String
    Default: 10.0.4.0/24
    Description: CIDR block for private subnet 2
  
  InstanceType:
    Type: String
    Default: t3.medium
    AllowedValues: [t3.small, t3.medium, t3.large]
    Description: EC2 instance type for dashboard
  
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: EC2 Key Pair for SSH access

Conditions:
  IsProduction: !Equals [!Ref Environment, production]

Resources:
  # VPC and Networking
  SmartManufacturingVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-vpc"
        - Key: Environment
          Value: !Ref Environment

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SmartManufacturingVPC
      CidrBlock: !Ref PublicSubnet1Cidr
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-public-subnet-1"

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SmartManufacturingVPC
      CidrBlock: !Ref PublicSubnet2Cidr
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-public-subnet-2"

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SmartManufacturingVPC
      CidrBlock: !Ref PrivateSubnet1Cidr
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-private-subnet-1"

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SmartManufacturingVPC
      CidrBlock: !Ref PrivateSubnet2Cidr
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-private-subnet-2"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-igw"

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref SmartManufacturingVPC
      InternetGatewayId: !Ref InternetGateway

  # Network ACL with excessive permissions (vulnerability)
  NetworkACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref SmartManufacturingVPC
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-nacl"

  NetworkACLEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkACL
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100

  # IoT Core Thing Type
  SensorThingType:
    Type: AWS::IoT::ThingType
    Properties:
      ThingTypeName: !Sub "${ProjectName}-sensor-thing-type"
      ThingTypeDescription: "Thing type for manufacturing sensors"

  # IoT Policy
  SensorIoTPolicy:
    Type: AWS::IoT::Policy
    Properties:
      PolicyName: !Sub "${ProjectName}-sensor-policy"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - iot:Connect
              - iot:Publish
            Resource: "*"

  # Kinesis Data Stream
  SensorDataStream:
    Type: AWS::Kinesis::Stream
    Properties:
      Name: !Sub "${ProjectName}-sensor-data-stream"
      ShardCount: 2
      StreamEncryption:
        EncryptionType: KMS
        KeyId: alias/aws/kinesis
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # Lambda Execution Role
  AnomalyDetectionLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}-anomaly-detection-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaKinesisExecutionRole
      Policies:
        - PolicyName: TimestreamAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - timestream:WriteRecords
                  - timestream:DescribeEndpoints
                Resource: "*"

  # Lambda Function without X-Ray tracing (vulnerability)
  AnomalyDetectionLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${ProjectName}-anomaly-detection"
      Runtime: python3.9
      Handler: index.handler
      Role: !GetAtt AnomalyDetectionLambdaRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import statistics
          
          def handler(event, context):
              # Simple anomaly detection logic
              for record in event['Records']:
                  payload = json.loads(record['kinesis']['data'])
                  # Process sensor data and detect anomalies
                  print(f"Processing sensor data: {payload}")
              return {'statusCode': 200}
      Environment:
        Variables:
          TIMESTREAM_DATABASE: !Ref TimestreamDatabase
          TIMESTREAM_TABLE: !Ref TimestreamTable

  # Lambda Permission without source ARN restriction (vulnerability)
  LambdaKinesisPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AnomalyDetectionLambda
      Action: lambda:InvokeFunction
      Principal: kinesis.amazonaws.com

  # Event Source Mapping
  KinesisEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt SensorDataStream.Arn
      FunctionName: !Ref AnomalyDetectionLambda
      StartingPosition: LATEST

  # TimeStream Database
  TimestreamDatabase:
    Type: AWS::Timestream::Database
    Properties:
      DatabaseName: !Sub "${ProjectName}-sensor-database"

  # TimeStream Table
  TimestreamTable:
    Type: AWS::Timestream::Table
    Properties:
      DatabaseName: !Ref TimestreamDatabase
      TableName: !Sub "${ProjectName}-sensor-data"
      RetentionProperties:
        MemoryStoreRetentionPeriodInHours: 24
        MagneticStoreRetentionPeriodInDays: 365

  # EC2 Security Group
  DashboardSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${ProjectName}-dashboard-sg"
      GroupDescription: Security group for Grafana dashboard
      VpcId: !Ref SmartManufacturingVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-dashboard-sg"

  # Launch Template with insecure IMDS (vulnerability)
  DashboardLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub "${ProjectName}-dashboard-template"
      LaunchTemplateData:
        ImageId: ami-0c02fb55956c7d316
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyPairName
        SecurityGroupIds:
          - !Ref DashboardSecurityGroup
        MetadataOptions:
          HttpEndpoint: enabled
          HttpTokens: optional
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y
            yum install -y docker
            service docker start
            docker run -d -p 3000:3000 grafana/grafana

  # Auto Scaling Group
  DashboardAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${ProjectName}-dashboard-asg"
      LaunchTemplate:
        LaunchTemplateId: !Ref DashboardLaunchTemplate
        Version: !GetAtt DashboardLaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 3
      DesiredCapacity: 1
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      TargetGroupARNs:
        - !Ref DashboardTargetGroup
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-dashboard-instance"
          PropagateAtLaunch: true

  # Application Load Balancer
  DashboardALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${ProjectName}-dashboard-alb"
      Type: application
      Scheme: internet-facing
      SecurityGroups:
        - !Ref DashboardSecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2

  # Target Group
  DashboardTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${ProjectName}-dashboard-tg"
      Port: 3000
      Protocol: HTTP
      VpcId: !Ref SmartManufacturingVPC
      HealthCheckPath: /api/health

  # ALB Listener
  DashboardListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref DashboardTargetGroup
      LoadBalancerArn: !Ref DashboardALB
      Port: 80
      Protocol: HTTP

  # SNS Topic for alerts
  AlertTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "${ProjectName}-alerts"
      DisplayName: Manufacturing Alerts

  # SQS Queue without encryption (vulnerability)
  AlertQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${ProjectName}-alert-queue"
      VisibilityTimeoutSeconds: 300

  # CloudTrail without log validation (vulnerability)
  ManufacturingCloudTrail:
    Type: AWS::CloudTrail::Trail
    Properties:
      TrailName: !Sub "${ProjectName}-cloudtrail"
      S3BucketName: !Ref CloudTrailBucket
      IsLogging: true
      IsMultiRegionTrail: false
      IncludeGlobalServiceEvents: true

  # S3 Bucket for CloudTrail
  CloudTrailBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${ProjectName}-cloudtrail-${AWS::AccountId}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true